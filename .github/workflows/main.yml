name: Localization & Build

on:
  push:
    branches: [ master, locales ]
  workflow_dispatch:

jobs:
  sync-resx:
    # ✅ 仅在 master 分支触发
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️  Checkout full repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧹  Sync resx to locales/en
        run: |
          bash .github/scripts/sync_resx.sh

      - name: 🚀  Push to locales branch with BOT_TOKEN
        run: |
          git config user.name "CI Bot"
          git config user.email "ci@example.com"
          git remote set-url origin https://x-access-token:${{ secrets.BOT_TOKEN }}@github.com/${{ github.repository }}
          git push -f origin HEAD:locales

  build:
    # ✅ 无论谁触发，都能独立执行；如果是 master，还会自动 merge locales
    runs-on: windows-latest
    steps:
      - name: ⬇️  Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ✅ 如果当前分支是 master，则 merge locales 以获得最新翻译
      - name: 🔀  Merge locales if needed
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.BOT_TOKEN }}@github.com/${{ github.repository }}
          if [ "${{ github.ref_name }}" = "master" ]; then
            git fetch origin locales
            git merge --no-edit --strategy-option ours origin/locales || echo "Already merged"
          fi

      - name: 🛠️  Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3

      - name: 🛠️  Restore NuGet (可选)
        run: nuget restore TranslateDLL.sln

      - name: ⚙️  Build Release + 卫星 DLL
        run: |
          msbuild TranslateDLL.sln `
            /p:Configuration=Release `
            /p:Platform="Any CPU" `
            /verbosity:minimal

      - name: 📦  Upload artifacts (exe + satellites)
        uses: actions/upload-artifact@v4
        with:
          name: app_release
          path: |
            TranslateDLL/bin/Release/TranslateDLL.exe
            TranslateDLL/bin/Release/**/TranslateDLL.resources.dll
